<?php

/**
 * @file
 * Primary module hooks for custom_hook module. Depending on when I wanted to
 * triggered my hook I can mention it inside existing hooks.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\user\UserInterface;

/**
 * implements hook_user_login().
 * 
 * Whenever the user user will be logged in item_list will be called.
 */
function custom_hook_user_login(UserInterface $account) {
  // Turning off my custom hook while using logging in.
  // \Drupal::moduleHandler()->invokeAll('items_list', ExampleBlock::SHARED_DATA); 
}

/**
 * implements hook_node_view().
 */
function custom_hook_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  // Getting the session of the current user.
  $session = \Drupal::request()->getSession();

  // Sessions by default tracks the view count.
  $current_counts = $session->get('custom_hook.view_counts', []);

  // Checking whether the the node have already viewed or not.
  if (!isset($current_counts[$entity->id()])) {

    // If this is the first time they've viewed the page we need to start the
    // counter.
    $current_counts[$entity->id()] = 1;
  }
  else {

    // If they have already viewed this page just increment the existing
    // counter.
    $current_counts[$entity->id()]++;
  }

  // Save the updated values.
  $session->set('custom_hook.view_counts', $current_counts);

  // Display the current number of pages the user has viewed along with the
  // node's content.
  $build['view_count'] = [
    '#markup' => '<p>' . t('You have viewed this node @total times this session.', [
      '@total' => $current_counts[$entity->id()],
    ]) . '</p>',
    // Disabling the cache so that number can be updated.
    '#cache' => [
      'max-age' => 0,
    ],
  ];
}
